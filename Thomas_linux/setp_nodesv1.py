import pexpect
import time
import sys
import subprocess
import concurrent.futures
import os
from dotenv import load_dotenv

# Charge les variables du fichier .env
load_dotenv()
nb_nodes = int(os.getenv("NB_NODES", 5))  # Utilise 5 par d√©faut si NB_NODES n'est pas d√©fini

def send_cmd(proc, cmd, wait=1, prompt=">"):
    """Envoie une commande √† un processus interactif et attend le prompt."""
    print(f"\nüü¢ Envoi de la commande : {cmd}")
    proc.sendline(cmd)
    try:
        proc.expect(prompt, timeout=5)
        output = proc.before.decode('utf-8', errors='ignore')
    except pexpect.TIMEOUT:
        print(f"‚ö†Ô∏è Timeout sur la commande '{cmd}', envoi d'une ligne vide.")
        proc.sendline("")
        try:
            proc.expect(prompt, timeout=5)
            output = proc.before.decode('utf-8', errors='ignore')
        except pexpect.TIMEOUT:
            output = proc.before.decode('utf-8', errors='ignore')
    print(f"üîπ R√©sultat de '{cmd}':\n{output}\n")
    time.sleep(wait)
    return output

def configure_leader():
    print("üöÄ Configuration du leader (ot-node1)...")
    leader = pexpect.spawn("docker attach ot-node1", timeout=30)
    leader.sendline("")  # D√©clenchement du prompt
    try:
        leader.expect(">", timeout=10)
    except pexpect.TIMEOUT:
        print("‚ö†Ô∏è Leader: Aucune r√©ponse, v√©rifie le conteneur ot-node1.")
        sys.exit(1)
    send_cmd(leader, "factoryreset", wait=1)
    send_cmd(leader, "dataset init new", wait=1)
    send_cmd(leader, "dataset commit active", wait=1)
    send_cmd(leader, "ifconfig up", wait=1)
    send_cmd(leader, "thread start", wait=5)
    time.sleep(5)
    send_cmd(leader, "state", wait=1)
    send_cmd(leader, "commissioner start", wait=1)
    print("‚úÖ ot-node1 est configur√© comme leader et commissioner d√©marr√©.")
    return leader

def get_eui64(container_name, prompt=">"):
    """
    R√©cup√®re l'EUI64 du n≈ìud en attachant au conteneur et en envoyant la commande "eui64".
    On suppose que la sortie est au format :
      > eui64
      18b4300000000008
      Done
    On renvoie donc la ligne juste avant "Done".
    """
    # print(f"\nüìå R√©cup√©ration de l'EUI64 pour {container_name}...")
    try:
        proc = pexpect.spawn(f"docker attach {container_name}", timeout=30)
    except Exception as e:
        print(f"Erreur lors de l'attachement √† {container_name}: {e}")
        return None
    proc.sendline("")
    try:
        proc.expect(prompt, timeout=10)
    except pexpect.TIMEOUT:
        print(f"‚ö†Ô∏è Timeout : Aucune r√©ponse du prompt pour {container_name}.")
        proc.close()
        return None
    proc.sendline("eui64")
    try:
        proc.expect(prompt, timeout=10)
        output = proc.before.decode('utf-8', errors='ignore')
    except pexpect.TIMEOUT:
        print(f"‚ö†Ô∏è Timeout : Pas de sortie de la commande 'eui64' pour {container_name}.")
        output = proc.before.decode('utf-8', errors='ignore')
    proc.close()
    lines = output.strip().splitlines()
    if len(lines) >= 2:
        eui = lines[-2].strip()
    elif len(lines) == 1:
        eui = lines[0].strip()
    else:
        eui = ""
    # print(f"üîπ {container_name} EUI64: {eui}")
    return eui

def add_joiner(leader, joiner_eui, retries=3):
    """Ajoute un joiner depuis le leader, avec retry en cas d'erreur de type NoBufs."""
    for attempt in range(retries):
        time.sleep(3)
        print(f"üõ† Tentative {attempt+1} pour ajouter le joiner {joiner_eui} depuis ot-node1...")
        output = send_cmd(leader, f"commissioner joiner add {joiner_eui} THREAD 60", wait=3)
        if "NoBufs" in output:
            print(f"‚ùå Buffer satur√© pour {joiner_eui} √† la tentative {attempt+1}. Attente et r√©essai.")
        else:
            print(f"‚úÖ Joiner {joiner_eui} ajout√© avec succ√®s.")
            return True
    print(f"‚ùå √âchec : Impossible d'ajouter le joiner {joiner_eui} apr√®s {retries} tentatives.")
    sys.exit(1)

def configure_joiner(leader, node_name, joiner_eui, retries=3):
    """
    Configure un joiner en envoyant 'joiner start THREAD' et en attendant 'Join success'
    puis en lan√ßant 'thread start' et en v√©rifiant que l'√©tat passe en 'child'.
    Si l'√©tat ne passe pas √† 'child' apr√®s 5 v√©rifications espac√©es de 2 secondes,
    relance le commissioner sur le leader et retente l'ajout.
    """
    print(f"üöÄ Configuration du joiner ({node_name})...")
    joiner = pexpect.spawn(f"docker attach {node_name}", timeout=30)
    joiner.sendline("")
    try:
        joiner.expect(">", timeout=10)
    except pexpect.TIMEOUT:
        print(f"‚ö†Ô∏è {node_name} ne r√©pond pas lors de l'obtention du prompt.")
        joiner.close()
        sys.exit(1)
    
    send_cmd(joiner, "factoryreset", wait=1)
    send_cmd(joiner, "ifconfig up", wait=1)
    
    success = False
    for attempt in range(retries):
        print(f"üü¢ Tentative {attempt+1} pour 'joiner start THREAD' sur {node_name}...")
        send_cmd(joiner, "joiner start THREAD", wait=5)
        try:
            joiner.expect("Join success", timeout=30)
            print(f"‚úÖ {node_name} a renvoy√© 'Join success'.")
            success = True
            break
        except pexpect.TIMEOUT:
            print(f"‚ùå Timeout sur 'joiner start THREAD' pour {node_name} √† la tentative {attempt+1}.")
            time.sleep(3)
    if not success:
        print(f"‚ùå √âchec pour {node_name} apr√®s {retries} tentatives de join.")
        joiner.close()
        sys.exit(1)
    
    send_cmd(joiner, "thread start", wait=1)
    
    # V√©rification r√©p√©t√©e de l'√©tat jusqu'√† obtenir "child"
    max_checks = 5
    state_ok = False
    for i in range(max_checks):
        time.sleep(2)
        output = send_cmd(joiner, "state", wait=1)
        if "child" in output.lower():
            print(f"‚úÖ {node_name} est bien configur√© en child (v√©rification {i+1}/{max_checks}).")
            state_ok = True
            break
        else:
            print(f"üîÑ {node_name} n'est pas encore en 'child' (v√©rification {i+1}/{max_checks}), attente 2 secondes...")
    joiner.close()
    if not state_ok:
        print(f"‚ùå Erreur : {node_name} n'est toujours pas en 'child' apr√®s {max_checks} v√©rifications.")
        print("Relancement du commissioner sur le leader et tentative de joiner add...")
        send_cmd(leader, "commissioner start", wait=1)
        add_joiner(leader, joiner_eui)
        time.sleep(5)
        # Optionnellement, on pourrait r√©essayer de configurer le joiner ici.
        sys.exit(1)

def main():
    # Lancer docker-compose pour d√©marrer les conteneurs
    print("üöÄ Lancement de docker-compose up -d...")
    subprocess.run(["docker-compose", "up", "-d"], check=True)
    
    print("‚è≥ Attente de 10 secondes pour que les conteneurs d√©marrent...")
    time.sleep(10)
    
    # Configurer le leader (ot-node1)
    leader = configure_leader()
    
    # G√©n√©rer la liste des joiners de ot-node2 √† ot-node10
    joiner_nodes = [f"ot-node{i}" for i in range(2, nb_nodes+1)]
    joiner_euis = {}
    
    # Phase 1 : R√©cup√©rer les EUI64 pour chaque joiner (en parall√®le)
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        future_to_node = {executor.submit(get_eui64, node): node for node in joiner_nodes}
        for future in concurrent.futures.as_completed(future_to_node):
            node = future_to_node[future]
            try:
                eui = future.result()
                joiner_euis[node] = eui
            except Exception as exc:
                print(f"{node} a g√©n√©r√© une exception: {exc}")
    
    print("\nüéâ Liste des EUI64 r√©cup√©r√©s :")
    for node, eui in joiner_euis.items():
        print(f"{node}: {eui}")
    
    # Phase 2 : Ajouter et configurer chaque joiner s√©quentiellement
    for node in joiner_nodes:
        eui = joiner_euis[node]
        add_joiner(leader, eui)
        configure_joiner(leader, node, eui)
    
    print("üéâ Configuration compl√®te du r√©seau Thread.")

if __name__ == "__main__":
    main()
